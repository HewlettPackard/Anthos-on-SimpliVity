(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{400:function(e,t,s){e.exports=s.p+"assets/img/ingress-virtual-service.dae8174b.png"},437:function(e,t,s){"use strict";s.r(t);var n=s(35),a=Object(n.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"cluster-ingress"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#cluster-ingress"}},[e._v("#")]),e._v(" Cluster ingress")]),e._v(" "),n("p",[e._v("This page describes the use of a number of methods used to enable access to cluster services including:")]),e._v(" "),n("ul",[n("li",[e._v("ClusterIP")]),e._v(" "),n("li",[e._v("Service endpoints")]),e._v(" "),n("li",[e._v("NodePort")]),e._v(" "),n("li",[e._v("Ingress")])]),e._v(" "),n("p",[e._v("For information on "),n("code",[e._v("LoadBalancer")]),e._v(", see the section "),n("a",{attrs:{href:"deploy-application"}},[e._v("Deploying an application")]),e._v(".")]),e._v(" "),n("h2",{attrs:{id:"connect-to-your-admin-workstation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#connect-to-your-admin-workstation"}},[e._v("#")]),e._v(" Connect to your admin workstation")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("ssh -i /root/anthos_secrets/vsphere_workstation ubuntu@10.15.155.200\n")])])]),n("h2",{attrs:{id:"configure-kubeconfig"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#configure-kubeconfig"}},[e._v("#")]),e._v(" Configure KUBECONFIG")]),e._v(" "),n("p",[e._v("Configure KUBECONFIG, using the appropriate user cluster name:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("export KUBECONFIG=~/kubeconfigs/gmcg-gke-usercluster-1-kubeconfig\n")])])]),n("h2",{attrs:{id:"create-deployment"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#create-deployment"}},[e._v("#")]),e._v(" Create deployment")]),e._v(" "),n("p",[e._v("Create a manifest file named "),n("code",[e._v("hello-deployment.yaml")]),e._v(" with the following content:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: hello-deployment\nspec:\n  selector:\n    matchLabels:\n      greeting: hello\n  replicas: 3\n  template:\n    metadata:\n      labels:\n        greeting: hello\n    spec:\n      containers:\n      - name: hello-world\n        image: "gcr.io/google-samples/hello-app:2.0"\n        env:\n        - name: "PORT"\n          value: "50000"\n      - name: hello-kubernetes\n        image: "gcr.io/google-samples/node-hello:1.0"\n        env:\n        - name: "PORT"\n          value: "8080"\n')])])]),n("p",[e._v("The deployment specifies two continers in each pod. The first container "),n("code",[e._v("hello-app")]),e._v(" responds with , while the second container "),n("code",[e._v("node-hello")]),e._v(" responds with .")]),e._v(" "),n("p",[e._v("Create the deployment using the manifest:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("kubectl apply -f hello-deployment.yaml\n")])])]),n("h2",{attrs:{id:"create-a-service"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#create-a-service"}},[e._v("#")]),e._v(" Create a service")]),e._v(" "),n("p",[e._v("You can expose your deployment to clients outside your cluster using a Kubernetes service of type "),n("code",[e._v("NodePort")]),e._v(".\nCreate a manifest file named "),n("code",[e._v("hello-service.yaml")]),e._v(" with the following content:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("apiVersion: v1\nkind: Service\nmetadata:\n  name: hello-service\nspec:\n  type: NodePort\n  selector:\n    greeting: hello\n  ports:\n  - name: world-port\n    protocol: TCP\n    port: 60000\n    targetPort: 50000\n  - name: kubernetes-port\n    protocol: TCP\n    port: 60001\n    targetPort: 8080\n")])])]),n("p",[e._v("In the preceding example "),n("a",{attrs:{href:"deploy-application"}},[e._v("Deploying an application")]),e._v(", the type of service was "),n("code",[e._v("LoadBalancer")]),e._v(" and you\nspecified a "),n("code",[e._v("loadBalancerIP")]),e._v(".")]),e._v(" "),n("p",[e._v("In this instance, you create a service of type "),n("code",[e._v("NodePort")]),e._v(". This opens a specific port on all the nodes in the user\ncluster, and any traffic that is sent to this port is forwarded to the service. While you can explicitly set a specific\nport to open on the nodes, using the "),n("code",[e._v("nodePort")]),e._v(" field, it is better to allow Kubernetes to assign a random port.")]),e._v(" "),n("p",[e._v("Create the service:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("kubectl apply -f hello-service.yaml\n")])])]),n("h2",{attrs:{id:"service-details"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#service-details"}},[e._v("#")]),e._v(" Service details")]),e._v(" "),n("p",[e._v("Display a summary of the service:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("kubectl get svc\n\nNAME            TYPE           CLUSTER-IP     EXTERNAL-IP    PORT(S)                           AGE\nhello-service   NodePort       10.98.60.245   <none>         60000:31712/TCP,60001:30536/TCP   21s\n")])])]),n("p",[e._v("For more details, use "),n("code",[e._v("kubectl describe")]),e._v(":")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('kubectl describe svc hello-service\n\nName:                     hello-service\nNamespace:                default\nLabels:                   <none>\nAnnotations:              kubectl.kubernetes.io/last-applied-configuration:\n                            {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"hello-service","namespace":"default"},"spec":{"ports":[{"name":"w...\nSelector:                 greeting=hello\nType:                     NodePort\nIP:                       10.98.60.245\nPort:                     world-port  60000/TCP\nTargetPort:               50000/TCP\nNodePort:                 world-port  31712/TCP\nEndpoints:                192.168.1.10:50000,192.168.3.20:50000,192.168.4.4:50000\nPort:                     kubernetes-port  60001/TCP\nTargetPort:               8080/TCP\nNodePort:                 kubernetes-port  30536/TCP\nEndpoints:                192.168.1.10:8080,192.168.3.20:8080,192.168.4.4:8080\nSession Affinity:         None\nExternal Traffic Policy:  Cluster\nEvents:                   <none>\n')])])]),n("h2",{attrs:{id:"using-clusterip"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#using-clusterip"}},[e._v("#")]),e._v(" Using ClusterIP")]),e._v(" "),n("p",[e._v("Connect to one of your cluster nodes, as described in "),n("a",{attrs:{href:"using-ssh"}},[e._v("Using SSH to connect to cluster nodes")]),e._v(":")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("ssh -i ~/.ssh/gmcg-gke-usercluster-1.key ubuntu@10.15.155.121\n")])])]),n("p",[e._v("Access the "),n("code",[e._v("hello-app")]),e._v(" container using the ClusterIP "),n("code",[e._v("10.98.60.245")]),e._v(" and the "),n("code",[e._v("port")]),e._v(" value "),n("code",[e._v("60000")]),e._v(" set in the deployment manifest:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("curl 10.98.60.245:60000\n\nHello, world!\nVersion: 2.0.0\nHostname: hello-deployment-79d7c89847-g7cpj\n")])])]),n("p",[e._v("Access the second container, "),n("code",[e._v("node-hello")]),e._v(", again using  the ClusterIP "),n("code",[e._v("10.98.60.245")]),e._v(" but with "),n("code",[e._v("port")]),e._v(" value "),n("code",[e._v("60001")]),e._v(":")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("curl 10.98.60.245:60001\n\nHello Kubernetes!\n")])])]),n("h2",{attrs:{id:"using-endpoints"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#using-endpoints"}},[e._v("#")]),e._v(" Using endpoints")]),e._v(" "),n("p",[e._v("There are three endpoints for accessing each container, since the deployment specified "),n("code",[e._v("replicas: 3")]),e._v(" for the number of\npods to create.")]),e._v(" "),n("p",[e._v("You can access the "),n("code",[e._v("hello-app")]),e._v(" container using one of the three endpoints for the port named "),n("code",[e._v("world-port")]),e._v(":")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("kubectl describe svc hello-service\n\nName:                     hello-service\n...\nPort:                     world-port  60000/TCP\nTargetPort:               50000/TCP\nPort:                     world-port  60000/TCP\nEndpoints:                192.168.1.10:50000,192.168.3.20:50000,192.168.4.4:50000\n")])])]),n("p",[e._v("Connect to one of your cluster nodes using "),n("code",[e._v("ssh")]),e._v(", choose one of the endpoints using the "),n("code",[e._v("targetPort")]),e._v(" of "),n("code",[e._v("50000")]),e._v(" and use "),n("code",[e._v("curl")]),e._v(":")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("curl 192.168.1.10:50000\n\nHello, world!\nVersion: 2.0.0\nHostname: hello-deployment-79d7c89847-g7cpj\n")])])]),n("p",[e._v("You can access the second container, "),n("code",[e._v("node-hello")]),e._v(" using one of the three endpoints for the port named "),n("code",[e._v("kubernetes-port")]),e._v(":")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("kubectl describe svc hello-service\n\nName:                     hello-service\n...\nPort:                     kubernetes-port  60001/TCP\nTargetPort:               8080/TCP\nNodePort:                 kubernetes-port  30536/TCP\nEndpoints:                192.168.1.10:8080,192.168.3.20:8080,192.168.4.4:8080\n")])])]),n("p",[e._v("Connect to one of your cluster nodes using "),n("code",[e._v("ssh")]),e._v(", choose one of the endpoints using the "),n("code",[e._v("targetPort")]),e._v(" of "),n("code",[e._v("8080")]),e._v(" and use "),n("code",[e._v("curl")]),e._v(":")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("curl 192.168.1.10:8080\n\nHello Kubernetes!\n")])])]),n("h3",{attrs:{id:"alternative-to-using-ssh-for-curl"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#alternative-to-using-ssh-for-curl"}},[e._v("#")]),e._v(" Alternative to using ssh for curl")]),e._v(" "),n("p",[e._v("Instead of using SSH to access the user cluster, you could deploy an image using "),n("code",[e._v("kubectl")]),e._v(" on the admin workstation:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("kubectl run curl --image=radial/busyboxplus:curl -i --tty\n")])])]),n("p",[e._v("You can then test access to the containers using either the ClusterIP with the "),n("code",[e._v("port")]),e._v(" or the endpoints with the "),n("code",[e._v("targetPort")]),e._v(", for example:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("[ root@curl-6bf6db5c4f-qc7t4:/ ]$ curl 10.98.60.245:60000\n\nHello, world!\nVersion: 2.0.0\nHostname: hello-deployment-79d7c89847-m7lzr\n")])])]),n("h2",{attrs:{id:"using-nodeport"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#using-nodeport"}},[e._v("#")]),e._v(" Using NodePort")]),e._v(" "),n("p",[e._v("A service of type "),n("code",[e._v("NodePort")]),e._v(" opens a specific port on all the nodes in the user\ncluster, and any traffic that is sent to this port is forwarded to the service.")]),e._v(" "),n("p",[e._v("Determine the addresses of the nodes in your user cluster, using the "),n("code",[e._v("-o wide")]),e._v(" option:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("kubectl get nodes -o wide\n\nNAME                   STATUS   ROLES    AGE     VERSION          INTERNAL-IP     EXTERNAL-IP     OS-IMAGE             KERNEL-VERSION     CONTAINER-RUNTIME\ngmcg-gke-user1-node1   Ready    <none>   7d18h   v1.16.8-gke.6   10.15.155.121   10.15.155.121   Ubuntu 18.04.4 LTS   5.3.0-53-generic   docker://19.3.2\ngmcg-gke-user1-node2   Ready    <none>   7d18h   v1.16.8-gke.6   10.15.155.122   10.15.155.122   Ubuntu 18.04.4 LTS   5.3.0-53-generic   docker://19.3.2\ngmcg-gke-user1-node3   Ready    <none>   7d18h   v1.16.8-gke.6   10.15.155.123   10.15.155.123   Ubuntu 18.04.4 LTS   5.3.0-53-generic   docker://19.3.2\ngmcg-gke-user1-node4   Ready    <none>   7d18h   v1.16.8-gke.6   10.15.155.124   10.15.155.124   Ubuntu 18.04.4 LTS   5.3.0-53-generic   docker://19.3.2\ngmcg-gke-user1-node5   Ready    <none>   2d21h   v1.16.8-gke.6   10.15.155.125   10.15.155.125   Ubuntu 18.04.4 LTS   5.3.0-53-generic   docker://19.3.2\n")])])]),n("p",[e._v("Use the "),n("code",[e._v("nodePort")]),e._v(" for the "),n("code",[e._v("hello-world")]),e._v(" container with the IP address of a node in your user cluster:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("curl 10.15.155.121:31712\n\nHello, world!\nVersion: 2.0.0\nHostname: hello-deployment-79d7c89847-g7cpj\n")])])]),n("p",[e._v("Similarly, use the "),n("code",[e._v("nodePort")]),e._v(" for the "),n("code",[e._v("node-hello")]),e._v(" container with the IP address of a node in your user cluster:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("curl 10.15.155.121:30536\n\nHello Kubernetes!\n")])])]),n("h2",{attrs:{id:"creating-an-ingress"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#creating-an-ingress"}},[e._v("#")]),e._v(" Creating an Ingress")]),e._v(" "),n("p",[e._v("As part of creating your user cluster, you specified a virtual IP address (VIP) for ingress by providing a value for "),n("code",[e._v("gke_cluster_config.cluster_ingress_vip")]),e._v(" for each cluster in your configuration file.")]),e._v(" "),n("p",[e._v("When a client sends a request to your user cluster ingress VIP, the request is routed to your F5 BIG-IP load balancer. The load balancer forwards the request to an ingress Service running in your user cluster. The ingress Service is configured to forward the request to different backends depending on the path in the request URL.")]),e._v(" "),n("p",[e._v("It is important to understand that there are two different Services related to the steps in this topic:")]),e._v(" "),n("ul",[n("li",[e._v("Your Service named "),n("code",[e._v("hello-service")]),e._v(". This is a Service that you created to expose the Pods of your "),n("code",[e._v("hello-deployment")]),e._v(" Deployment.")]),e._v(" "),n("li",[e._v("The ingress Service that runs in the "),n("code",[e._v("gke-system")]),e._v(" namespace of your user cluster. This Service is part of your cluster infrastructure.")])]),e._v(" "),n("h3",{attrs:{id:"enabling-ingress"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#enabling-ingress"}},[e._v("#")]),e._v(" Enabling Ingress")]),e._v(" "),n("p",[e._v("You must first enable Ingress on your Anthos GKE on-prem user cluster. For more information see the documentation at\n"),n("a",{attrs:{href:"https://cloud.google.com/anthos/gke/docs/on-prem/how-to/enable-ingress",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://cloud.google.com/anthos/gke/docs/on-prem/how-to/enable-ingress"),n("OutboundLink")],1),e._v(".")]),e._v(" "),n("p",[e._v("For this example, you can create a file called "),n("code",[e._v("ingress-gateway.yaml")]),e._v(":")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('apiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: istio-autogenerated-k8s-ingress\n  namespace: gke-system\nspec:\n  selector:\n    istio: ingress-gke-system\n  servers:\n  - port:\n      number: 80\n      protocol: HTTP2\n      name: http\n    hosts:\n    - "*"\n')])])]),n("p",[e._v("Create this Gateway:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("kubectl apply -f ingress-gateway.yaml\n")])])]),n("p",[e._v("You should now see in your F5 web console, that the virtual server for "),n("code",[e._v("gke-system_istio-ingress-80-tcp")]),e._v(" is now enabled:")]),e._v(" "),n("p",[n("img",{attrs:{src:s(400),alt:'"Ingress virtual service"'}})]),e._v(" "),n("p",[n("strong",[e._v("Figure.")]),e._v(" Ingress virtual service")]),e._v(" "),n("h3",{attrs:{id:"using-ingress"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#using-ingress"}},[e._v("#")]),e._v(" Using Ingress")]),e._v(" "),n("p",[e._v("Create a manifest named "),n("code",[e._v("my-ingress.yaml")]),e._v(" with the content below:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: my-ingress\nspec:\n  rules:\n  - http:\n      paths:\n      - path: /greet-the-world\n        backend:\n          serviceName: hello-service\n          servicePort: 60000\n      - path: /greet-kubernetes\n        backend:\n          serviceName: hello-service\n          servicePort: 60001\n")])])]),n("p",[e._v("Deploy the Ingress service:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("kubectl apply -f my-ingress.yaml\n")])])]),n("p",[e._v("The Ingress resource maps the path "),n("code",[e._v("/greet-the-world")]),e._v(" to "),n("code",[e._v("port:60000")]),e._v(" in the Service you created earlier. Using\nthe ingress VIP on the external network and the path "),n("code",[e._v("/greet-the-world")]),e._v(", you will access the "),n("code",[e._v("hello-world")]),e._v(" container:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("curl 10.15.158.64/greet-the-world\n\nHello, world!\nVersion: 2.0.0\nHostname: hello-deployment-79d7c89847-h6q4z\n")])])]),n("p",[e._v("The Ingress resource maps the path "),n("code",[e._v("/greet-kubernetes")]),e._v(" to "),n("code",[e._v("port:60000")]),e._v(" in the Service that you created earlier. Using\nthe ingress VIP on the external network and the path "),n("code",[e._v("/greet-kubernetes")]),e._v(", you will access the "),n("code",[e._v("node-hello")]),e._v(" container:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("curl 10.15.158.64/greet-kubernetes\n\nHello Kubernetes!\n")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);