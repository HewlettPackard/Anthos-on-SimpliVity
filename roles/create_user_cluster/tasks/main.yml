---
# tasks file for create_user_cluster
#- name: Include vars from gkeadm config file
#  include_vars:
#    file: "{{ gkeadm_config | default('admin-ws-config.yaml') }}"

#- name: Get the IP for the current admin WS
#  include_tasks: admin_ws_ip.yml

- name: Read gkeadm file from disk
  become: false 
  delegate_to: localhost
  vars:
    contents: "{{ lookup('file', '{{ output_directory }}/{{ adminWorkstation.name }}') }}"
    regexp: 'ubuntu@\b(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\b'
  set_fact:
    gke_adm_wrkst_ip_ff: "{{ contents | regex_search(regexp, '\\1') }}"

- name: Add host to running inventory
  add_host:
    hostname: "{{ inventory_hostname }}"
    groups:
      - anthos_admin
    ansible_host: "{{ gke_adm_wrkst_ip_ff | join('.') }}"

- name: create directory on admin WS to hold configurations
  become: false
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{ cluster_configurations_path }}" 
    - "{{ cluster_kubeconfig_path }}"
    - "{{ log_directory }}"

- name: Copy cluster configuration files to admin WS
  become: false
  copy:
    src: "{{ item.local_path }}"
    dest: "{{ cluster_configurations_path }}"
  with_items: "{{ gke_cluster_config }}"

- name: Initialize vSphere Environment for Anthos GKE on-prem
  become: false
  command: >
    gkectl prepare --config {{ cluster_configurations_path }}/{{ item.name }}
    --log_file ./logs/admin-cluster-{{ item.name.split('.')[0] }}-prepare.log 
    {{ gkectl_prepare_flags }}
  delegate_to: gke-admin-ws
  when: > 
     gkectl_run_prepare
     and 'admin' in item.name
  loop: "{{ gke_cluster_config }}"

- name: Check Anthos GKE on-prem Admin Cluster Configuration
  become: false
  command: >
    gkectl check-config --config {{ cluster_configurations_path }}/{{ item.name }}
    --log_file ./logs/admin-cluster-{{ item.name.split('.')[0] }}-checkconfig.log 
    {{ gkectl_check_flags }}
  delegate_to: gke-admin-ws
  when: > 
     enable_config_check
     and create_admin_cluster
     and 'admin' in item.name
  loop: "{{ gke_cluster_config }}"

- name: Create Anthos GKE on-prem Admin Cluster Configuration
  become: false
  command: >
    gkectl create cluster --config {{ cluster_configurations_path }}/{{ item.name }}
    --kubeconfig-out {{ cluster_kubeconfig_path }}/{{ admin_cluster_kubeconfig }} 
    --log_file ./logs/admin-cluster-{{ item.name.split('.')[0] }}-create.log
    {{ gkectl_create_flags }}
  delegate_to: gke-admin-ws
  register: gke_admin_cluster_create
  when: >
    create_admin_cluster
    and 'admin' in item.name
  loop: "{{ gke_cluster_config }}"
  failed_when: gke_admin_cluster_create.rc != 0

- name: Output Admin Cluster Create Status
  debug:
    msg: 
      - "{{ gke_admin_cluster_create | json_query('results[].stdout_lines') }}"
  when: create_admin_cluster

- name: Check Anthos GKE on-prem User Cluster Configuration
  become: false
  command: >
    gkectl check-config --kubeconfig {{ cluster_kubeconfig_path }}/{{ admin_cluster_kubeconfig }} 
    --config {{ cluster_configurations_path }}/{{ item.name }}
    --log_file ./logs/user-cluster-{{ item.name.split('.')[0] }}-checkconfig.log 
    {{ gkectl_check_flags }}
  delegate_to: gke-admin-ws
  when: > 
    enable_config_check
    and create_user_cluster
    and 'user' in item.name
  loop: "{{ gke_cluster_config }}"

- name: Create Anthos GKE on-prem User Cluster
  become: false
  command: >
    gkectl create cluster --kubeconfig {{ cluster_kubeconfig_path }}/{{ admin_cluster_kubeconfig }}
    --config {{ cluster_configurations_path }}/{{ item.name }}
    --log_file ./logs/user-cluster-{{ item.name.split('.')[0] }}-create.log
    {{ gkectl_create_flags }}
  register: gke_user_cluster_create
  delegate_to: gke-admin-ws
  when: > 
    create_user_cluster
    and 'user' in item.name
  loop: "{{ gke_cluster_config }}"
  failed_when: gke_user_cluster_create.rc != 0

- name: Output Cluster Create Status FULL
  debug:
    msg: "{{ gke_user_cluster_create }}" 
    verbosity: 3

- name: Output Cluster Create Status Parsed
  debug:
    msg: "{{ gke_user_cluster_create | json_query('results[].stdout_lines') }}"
